1. Enter the number of hours it took you to complete the project between
   the <<< and >>> signs below (eg, <<<10>>>).

   <<<8>>>
   
2. Enter the difficulty level (1: very easy; 5: very difficult) of the project
   between the <<< and >>> signs below (eg, <<<3>>>).

   <<<3>>>

3. Provide a short description of how you approached each problem, issues you 
   encountered, and how you resolved those issues.

   Problem 1 (Using CLEmitter)
      Approach: Well I looked into GenFactorial.java and others from tests/clemitters.
      I looked at how they created the main function, their factorial function, and the
      stringbuilder that was needed. Then I saw the hint provided, and wrote the example for it.

      Issues and resolution: The issue with the IsPrime function led to a lot of issues, and I
      needed to look at the debugger (the stack was empty). Piazza provided a huge help with
      javap -v -p IsPrime to get a better understanding of how to approach this.

   Problem 2 (Arithmetic Operations)
      Approach: I added new token/enums on the TokenInfo. Then I updated the scanner and added new
      cases for the operations, and finally I added the JExpression for DIV and REM on then on
      unaryExpression I added to check for the PLUS.

      Issues and resolution: I was able to run it perfectly fine, most of my help came from
      rewatching the lecture.

   Problem 3 (Bitwise Operations)
      Approach: After understanding the purpose of Problem 2, I decided to do the whole approach
      again. I created Tokens at TokenInfo.java for all the Bitwise Operations, then proceeded to
      add the extra test cases for all of the operations. If a case already existed, just an
      conditonal block, etc etc. Then after I created JBinaryExpression subclasses for all the
      Bitwise Operation, I took into consideration the hint that Homework provided for complements.
      Then I proceed to all the BinaryExpressions into multiplicativeExpression and everything
      worked

      Issues and resolution: It ran well, however after going into problem 4 I would realize that I
      need to update and fix the other JExpressions will explain it more there.

   Problem 4 (Shift Operations)
      Approach: Just the same steps from the previous problems, of course designing the
      codegen/analyze parts weren't too hard I mostly copied and pasted.

      Issues and resolution: Apparently I was getting a lot of errors were it stated "found >> where
       ; is sought" and I really had no idea how to approach this. A student gave me a tip on what
       the issue could be, and apparently it had to do with other Expression. After relooking into
       the Appendix, I saw that there were levels towards each specific expression. I realized that
       though the tests would run well, if I ran something that  had more operations towards the
       expression it may have been very buggy. So I looked into the levels of each expression and
       dedicated time to adding each one. This would lead to me to having moving my BitWise
       Operations Expressions from the multiplicativeExpression block, to their own ExpressionBFunc.
       Once fixing that issue, and my BitShift Expressions..
      "

4. Did you receive help from anyone? List their names, status (classmate, 
   CS451/651 grad, TA, other), and the nature of help received.

   Name               Status       Help Received
   ----               ------       -------------

   Suncharn           Classmate    Explain how to approach problem 1 on designing

5. List any other comments here. Feel free to provide any feedback on how
   much you learned from doing the assignment, and whether you enjoyed
   doing it.

   Pretty fun assignment, building some pieces of the compiler feels very immersive to a job.
   Compare to just designing from scratch and being clueless.
