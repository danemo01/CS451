1. Enter the number of hours it took you to complete the project between
   the <<< and >>> signs below (eg, <<<35>>>).

   <<< >>>
   
2. Enter the difficulty level (1: very easy; 5: very difficult) of the project
   between the <<< and >>> signs below (eg, <<<3>>>).

   <<<5>>>

3. Provide a short description of how you approached each problem, issues you 
   encountered, and how you resolved those issues.

   Part I (Additions to JavaCC Scanner)

   Problem 1 (Multiline Comment)
      Approach: It was hard to approach this, as I forgot much of Scanner in HW2. However I reread
      some of the book on chapter 3.5 and the JavaCC syntax for look_up. And Found Section 2.9
      explaining how a Whitespace would work.

      Issues and resolution: No Issue

   Problem 2 (Operators)
      Approach: I looked into the Grammar Table. Saw the unfinish sections for Operators and decided
       to add the missing parts there.

      Issues and resolution: Didn't come into any issues that much

   Problem 3 (Reserved Words)
      Approach: Same Approach as Problem 2, just added the finish parts into the Token spaces.

      Issues and resolution: Don't remember much issues on Reserved Words.

   Problem 4 (Literals)
      Approach: It was hard to understand how to approach this so I made various trials and errors.
      However I understood that you could create extra states and seeing what they have using
      "<#STATE..>"

      Issues and resolution: ...

   Part II (Additions to JavaCC Parser)

   Problem 5 (Long and Double Basic Types)
      Approach: I looked at my notes from the previous homework, and learned that I needed to update
       the Literal() to provide the new types.

      Issues and resolution: I'm unsure if I had problems here, since I accidently did work on
      Operators first. Then I led to a lot of issues which would lead to a spiral of confusion.

   Problem 6 (Operators)
      Approach: I reread the predence of the expressions on the book, and as well as looked at my
      Parser.java for reference.

      Issues and resolution: It took a while, but I needed to change and update various Expressions.
      Eventually I just checked what changes I made in parser.java vs j--.jj. The last issue I had
      was that I didn't update the ConditionalExpression and that led to unknown errors for a while.

   Problem 7 (Conditional Expression)
      Approach: Easy to implement, similar to how it was done on Satement() on parser.java.

      Issues and resolution: Implemented and ran well.

   Problem 8 (Do Statement)
      Approach: Same as Problem 7, though I copied and paste what was already done with <WHILE>.

      Issues and resolution: No Issues

   Problem 9 (For Statement)
      Approach: Reread the grammar that was provided with the project. I created the forInit and
      forUpdate functions. The syntax for JavaCC was really easy to copy since I could see
      prexisting non-terminals (functions) doing the same idea with the grammar. Then I implemented
      forInit and forUpdate.

      Issues and resolution: I came across some errors that would appear on Break (problem 10)'s
      issue. I think the issue may have been that I allocated memory too early when it was not
      needed. Though causing random issues when comparing the AST that I could not identify. However
      after assigning them into null on the declaration part(beginning) of forUpdate and forInit.
      Then only allocating memory when needed for the particular variables it worked well. This
      would be a common issue up until Problem 14. Though This is where I realized the problem after
       a few hours of brain-storming.

   Problem 10 (Break Statement)
      Approach: Same idea as parser.java

      Issues and resolution: Had issue with Forloop, thought Break was easily to implement

   Problem 11 (Continue Statement)
      Approach: Same idea as parser.java

      Issues and resolution: No issue what so ever

   Problem 12 (Switch Statement)
      Approach: Similar to parser.java, though at this point the Grammar rule should be more than
      enough.

      Issues and resolution: Had similar issues mention on Problem6, essentially it was difficult to
       know the issues that I led here other than the regular SyntaxError with JavaCC when running
       ant. But I did do the similar step from Problem 9 and it worked fine.

   Problem 13 (Exception Handlers)
      Approach:  This was a bad approach, but after more or less doing the routine of converting
      Parser.java into .jj. I looked at each part of the grammar rule and decided to implement
      everything I possibiliy can. Doing this then both P14 and P13 would be done.

      Issues and resolution: I had a lot of issues on creating almost everything and led to a lot of
       syntax errors, due to just taking basis of code provided (ClassDeclaration, Classbody) and
       converting them (InterfaceDeclaration, InterfaceBody). I honestly spent a lot of time fixing
       bugs and comparing .ast until I eventually figured out that all the other problems were also
       having issues.

   Problem 14 (Interface Type Declaration)
      Approach: After finishing Problem 13, this was done and ran well

      Issues and resolution: N/A

4. Did you receive help from anyone? List their names, status (classmate, 
   CS451/651 grad, TA, other), and the nature of help received.

   Name               Status       Help Received
   ----               ------       -------------

   Jeffrey            Students      Helped me understand how the JavaCC works

5. List any other comments here. Feel free to provide any feedback on how
   much you learned from doing the assignment, and whether you enjoyed
   doing it.

   I apologize if my report is bad, I was panicking a bit on this. And have not slept
   since then. Though I can say that one big mistake that makes this hard to explain is that I
   wasn't originally running the "javaccj--" and I was doing "j--" so I thought everything worked
   fine. Until I ran it on gradescope and reread the assignment. So this would lead to a lot of bugs
    and overall stress of fixing it.
